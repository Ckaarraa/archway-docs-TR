"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[8332],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4073:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},c="Joining a Network",p={unversionedId:"node/join-a-network",id:"node/join-a-network",isDocsHomePage:!1,title:"Joining a Network",description:"Step 1",source:"@site/docs/node/join-a-network.md",sourceDirName:"node",slug:"/node/join-a-network",permalink:"/docs/node/join-a-network",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/node/join-a-network.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Running a Local Testnet",permalink:"/docs/node/running-a-local-testnet"},next:{title:"Overview",permalink:"/docs/validator/overview"}},l=[{value:"Step 1",id:"step-1",children:[]},{value:"Step 2",id:"step-2",children:[]},{value:"Step 3",id:"step-3",children:[]},{value:"Step 4",id:"step-4",children:[]}],u={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"joining-a-network"},"Joining a Network"),(0,o.kt)("h2",{id:"step-1"},"Step 1"),(0,o.kt)("p",null,"Let's first cleanup our network. This is needed if you already have a genesis file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd unsafe-reset-all\nrm -rf ~/.app\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": This command will remove all data and configs you already set."),(0,o.kt)("h2",{id:"step-2"},"Step 2"),(0,o.kt)("p",null,"Download compressed genesis state and extract it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"wget https://github.com/.../genesis.json.gz\ngzip -d genesis.json.gz\n")),(0,o.kt)("h2",{id:"step-3"},"Step 3"),(0,o.kt)("p",null,"Move the downloaded genesis state to the archway directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# mkdir -p ~/.app\n# mkdir -p ~/.app/config\nmv genesis.json ~/.app/config/genesis.json\n")),(0,o.kt)("h2",{id:"step-4"},"Step 4"),(0,o.kt)("p",null,"Start the archway and join the network"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"archwayd start --p2p.seeds address1@public-seed.archway.something.network:xxxx,address2@public-seed.archway.something.network:xxxx,address3@public-seed.archway.something.network:xxxx,address4@public-seed.archway.something.network:xxxx --x-crisis-skip-assert-invariants\n")),(0,o.kt)("p",null,"Expected output:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TODO:")," ",(0,o.kt)("em",{parentName:"p"},"We need to have some nodes and actually run these commands to see what happens next.")))}d.isMDXComponent=!0}}]);