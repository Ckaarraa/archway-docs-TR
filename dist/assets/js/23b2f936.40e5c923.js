"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[494],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),m=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=m(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=m(r),d=a,g=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return r?n.createElement(g,s(s({ref:t},l),{},{components:r})):n.createElement(g,s({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var m=2;m<o;m++)s[m]=r[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8269:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return l},default:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),s=["components"],i={sidebar_position:3},c="CosmWasm",m={unversionedId:"create/getting-started/cosmwasm",id:"create/getting-started/cosmwasm",isDocsHomePage:!1,title:"CosmWasm",description:"CosmWasm is a Cosmos framework that allows developers to write multi-chain smart contracts using any programming language which compiles to Wasm. Archway tooling provides modules for programming Archway smart contracts in Rust, but in future will support Wasm development in both Rust and Golang.",source:"@site/docs/create/getting-started/cosmwasm.md",sourceDirName:"create/getting-started",slug:"/create/getting-started/cosmwasm",permalink:"/docs/create/getting-started/cosmwasm",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/create/getting-started/cosmwasm.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Basics",permalink:"/docs/create/getting-started/basics"},next:{title:"Launchpad",permalink:"/docs/create/guides/launchpad"}},l=[{value:"Developer Ecosystem",id:"developer-ecosystem",children:[]},{value:"Resources",id:"resources",children:[]}],u={toc:l};function p(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cosmwasm"},"CosmWasm"),(0,o.kt)("p",null,"CosmWasm is a Cosmos framework that allows developers to write multi-chain smart contracts using any programming language which compiles to Wasm. Archway tooling provides modules for programming Archway smart contracts in Rust, but in future will support Wasm development in both Rust and Golang. "),(0,o.kt)("h2",{id:"developer-ecosystem"},"Developer Ecosystem"),(0,o.kt)("p",null,"CosmWasm is written as a module that can plug into the Cosmos SDK, making it easy for deploying Cosmos blockchains that utilize Wasm smart contracts. "),(0,o.kt)("p",null,"Disregarding code pertaining to specific chains, CosmWasm contracts deploy and behave interchangeably among blockchains running the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/wasmd"},(0,o.kt)("inlineCode",{parentName:"a"},"wasmd"))," binary. This means developers can find many helpful resources, documentation, and guides that may or may not be included on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.archway.io"},"this")," website. "),(0,o.kt)("h4",{id:"lets-build-together"},"Let's build together!"),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.cosmwasm.com/"},"CosmWasm docs"))))}p.isMDXComponent=!0}}]);