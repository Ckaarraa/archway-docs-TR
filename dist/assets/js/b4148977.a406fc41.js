"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[8332],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,g=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4073:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:4},l="Joining a Network",c={unversionedId:"node/join-a-network",id:"node/join-a-network",isDocsHomePage:!1,title:"Joining a Network",description:"Cleaning up",source:"@site/docs/node/join-a-network.md",sourceDirName:"node",slug:"/node/join-a-network",permalink:"/docs/node/join-a-network",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/node/join-a-network.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Running a Local Testnet",permalink:"/docs/node/running-a-local-testnet"},next:{title:"Validators Overview",permalink:"/docs/validator/overview"}},p=[{value:"Cleaning up",id:"cleaning-up",children:[]},{value:"Download the genesis file",id:"download-the-genesis-file",children:[]},{value:"Replace local genesis file with Archway <code>genesis.json</code>",id:"replace-local-genesis-file-with-archway-genesisjson",children:[]},{value:"Join the network",id:"join-the-network",children:[]}],d={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"joining-a-network"},"Joining a Network"),(0,a.kt)("h2",{id:"cleaning-up"},"Cleaning up"),(0,a.kt)("p",null,"Let's first cleanup our network. This is needed if you already have a genesis file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd unsafe-reset-all\nrm -rf ~/.app\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": This command will remove all data and configs you already set."),(0,a.kt)("h2",{id:"download-the-genesis-file"},"Download the genesis file"),(0,a.kt)("p",null,"Download compressed genesis state and extract it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wget https://github.com/.../genesis.json.gz\ngzip -d genesis.json.gz\n")),(0,a.kt)("h2",{id:"replace-local-genesis-file-with-archway-genesisjson"},"Replace local genesis file with Archway ",(0,a.kt)("inlineCode",{parentName:"h2"},"genesis.json")),(0,a.kt)("p",null,"Move the downloaded genesis state to the archway directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# mkdir -p ~/.app\n# mkdir -p ~/.app/config\nmv genesis.json ~/.app/config/genesis.json\n")),(0,a.kt)("h2",{id:"join-the-network"},"Join the network"),(0,a.kt)("p",null,"Start the archway and join the network"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"archwayd start --p2p.seeds <Address1>@<Host_Name_OR_IP1>:<PORT1>,<Address2>@<Host_Name_OR_IP2>:<PORT2>,<Address3>@<Host_Name_OR_IP3>:<PORT3>, ...<AddressN>@<Host_Name_OR_IPN>:<PORTN> --x-crisis-skip-assert-invariants\n")),(0,a.kt)("p",null,"Expected output:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TODO:")," ",(0,a.kt)("em",{parentName:"p"},"We need to have some nodes and actually run these commands to see what happens next.")))}u.isMDXComponent=!0}}]);