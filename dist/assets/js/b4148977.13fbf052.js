"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[8332],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=a,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4073:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={sidebar_position:4},c="Joining a Network",s={unversionedId:"node/join-a-network",id:"node/join-a-network",isDocsHomePage:!1,title:"Joining a Network",description:"Cleaning up",source:"@site/docs/node/join-a-network.md",sourceDirName:"node",slug:"/node/join-a-network",permalink:"/docs/node/join-a-network",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/node/join-a-network.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Running a Local Testnet",permalink:"/docs/node/running-a-local-testnet"},next:{title:"Validators Overview",permalink:"/docs/validator/overview"}},u=[{value:"Cleaning up",id:"cleaning-up",children:[]},{value:"Initialize node",id:"initialize-node",children:[]},{value:"Retrieve Genesis file",id:"retrieve-genesis-file",children:[]},{value:"Initialize account",id:"initialize-account",children:[]},{value:"Join the network",id:"join-the-network",children:[]}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"joining-a-network"},"Joining a Network"),(0,i.kt)("h2",{id:"cleaning-up"},"Cleaning up"),(0,i.kt)("p",null,"Let's first cleanup our network. This is needed if you already have a genesis file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd unsafe-reset-all\nrm -rf ~/.app\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": This command will remove all data and configs you already set."),(0,i.kt)("h2",{id:"initialize-node"},"Initialize node"),(0,i.kt)("p",null,"Run the following command to initialize the genesis file which is required to establish a network."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd init my-validator --chain-id my-chain \n")),(0,i.kt)("h2",{id:"retrieve-genesis-file"},"Retrieve Genesis file"),(0,i.kt)("p",null,"Download the genesis file from a validator node"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'wget -qO- <validator_url>/genesis| jq ."result"."genesis" > ~/.archway/config/genesis.json\n')),(0,i.kt)("h2",{id:"initialize-account"},"Initialize account"),(0,i.kt)("p",null,"Create a key to hold your account. Once you run this command, your may be prompted with a password dialogue. Please enter a new password for your account."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd keys add <my-validator-account>\n")),(0,i.kt)("h2",{id:"join-the-network"},"Join the network"),(0,i.kt)("p",null,"Start the archway and join the network"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"archwayd start --p2p.seeds <Address1>@<Host_Name_OR_IP1>:<PORT1>,<Address2>@<Host_Name_OR_IP2>:<PORT2>,<Address3>@<Host_Name_OR_IP3>:<PORT3>, ...<AddressN>@<Host_Name_OR_IPN>:<PORTN> --x-crisis-skip-assert-invariants\n")))}p.isMDXComponent=!0}}]);