"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[5392],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return m}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),s=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,h=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return a?t.createElement(h,i(i({ref:n},c),{},{components:a})):t.createElement(h,i({ref:n},c))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5188:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var t=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],l={sidebar_position:3},d="Running a Validator Node",s={unversionedId:"validator/running-a-validator-node",id:"validator/running-a-validator-node",isDocsHomePage:!1,title:"Running a Validator Node",description:"This guide shows how to setup a validator node in simple steps.",source:"@site/docs/validator/running-a-validator-node.md",sourceDirName:"validator",slug:"/validator/running-a-validator-node",permalink:"/docs/validator/running-a-validator-node",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/validator/running-a-validator-node.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Validator Requirements",permalink:"/docs/validator/requirements"},next:{title:"Monitoring a Validator",permalink:"/docs/validator/monitoring-validators"}},c=[{value:"Hardware requirements",id:"hardware-requirements",children:[]},{value:"Run your validator",id:"run-your-validator",children:[{value:"Run your node",id:"run-your-node",children:[]},{value:"Create your valdiator",id:"create-your-valdiator",children:[]}]},{value:"Run validator on genesis",id:"run-validator-on-genesis",children:[{value:"Initialize node",id:"initialize-node",children:[]},{value:"Initialize account",id:"initialize-account",children:[]},{value:"Create validator transaction",id:"create-validator-transaction",children:[]},{value:"Add transaction to genesis file",id:"add-transaction-to-genesis-file",children:[]},{value:"Start validator node",id:"start-validator-node",children:[]}]},{value:"Run validator from docker container for testnet",id:"run-validator-from-docker-container-for-testnet",children:[{value:"Get the Docker Image",id:"get-the-docker-image",children:[]},{value:"Init config",id:"init-config",children:[]},{value:"Retrieve Genesis",id:"retrieve-genesis",children:[]},{value:"Run your node",id:"run-your-node-1",children:[]},{value:"Create your valdiator",id:"create-your-valdiator-1",children:[]}]}],u={toc:c};function p(e){var n=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-a-validator-node"},"Running a Validator Node"),(0,o.kt)("p",null,"This guide shows how to setup a validator node in simple steps."),(0,o.kt)("p",null,"::: caution\n",(0,o.kt)("em",{parentName:"p"},"Note:")," For the moment Archway can be installed only by pulling from Docker Hub.\nFor example: docker pull archwaynetwork/archwayd:latest\nInstalling archwayd from source, coming soon!"),(0,o.kt)("h2",{id:"hardware-requirements"},"Hardware requirements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Linux distribution"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x86_64")," processor"),(0,o.kt)("li",{parentName:"ul"},"16GB RAM"),(0,o.kt)("li",{parentName:"ul"},"500GB-2TB Storage","*")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Storage size for validators will depend on level of pruning.")),(0,o.kt)("h2",{id:"run-your-validator"},"Run your validator"),(0,o.kt)("h3",{id:"run-your-node"},"Run your node"),(0,o.kt)("p",null,"Follow instructions in how to run your node in our ",(0,o.kt)("a",{parentName:"p",href:"/docs/node/join-a-network"},"join a network guide")),(0,o.kt)("h3",{id:"create-your-valdiator"},"Create your valdiator"),(0,o.kt)("p",null,"Once your node is ruunning and synced you can create a validator by staking tokens."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"archwayd tx staking create-validator \\\n--from <my-validator-account> \\\n--amount 1000000000udenom \\\n--min-self-delegation 1000000000udenom \\\n--commission-rate 0.01 \\\n--commission-max-rate 0.1 \\\n--commission-max-change-rate 0.1 \\\n--pubkey $(archwayd tendermint show-validator) \\\n--chain-id <chain_id>\n")),(0,o.kt)("h2",{id:"run-validator-on-genesis"},"Run validator on genesis"),(0,o.kt)("h3",{id:"initialize-node"},"Initialize node"),(0,o.kt)("p",null,"Run the following command to initialize the genesis file which is required to establish a network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd init my-validator --chain-id my-chain \n")),(0,o.kt)("h3",{id:"initialize-account"},"Initialize account"),(0,o.kt)("p",null,"Create a key to hold your account. Once you run this command, your may be prompted with a password dialogue. Please enter a new password for your account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd keys add my-validator-account\n")),(0,o.kt)("p",null,"Add that key into the genesis.app_state.accounts array in the genesis file."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," this command lets you set the number of coins. Make sure this account has some coins\nwith the genesis.app_state.staking.params.bond_denom denom, the default is staking."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd add-genesis-account $(archwayd keys show my-validator-account -a) 1000000000stake,1000000000ARCH\n")),(0,o.kt)("h3",{id:"create-validator-transaction"},"Create validator transaction"),(0,o.kt)("p",null,"We need to generate a transaction creating the validator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd gentx my-validator-account 1000000000stake \\\n  --commission-rate 0.01 \\\n  --commission-max-rate 0.1 \\\n  --commission-max-change-rate 0.1 \\\n  --pubkey $(archwayd tendermint show-validator) \\\n  --chain-id my-chain\n")),(0,o.kt)("h3",{id:"add-transaction-to-genesis-file"},"Add transaction to genesis file"),(0,o.kt)("p",null,"Add the generated bonding transaction to the genesis file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd collect-gentxs\n")),(0,o.kt)("h3",{id:"start-validator-node"},"Start validator node"),(0,o.kt)("p",null,"Now we can start our validator node in the local archway network"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd start\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," If you have multiple nodes running on the same machine, you will get some errors on ",(0,o.kt)("inlineCode",{parentName:"p"},"already in use ports"),", you either need to run them in isolated environments ",(0,o.kt)("em",{parentName:"p"},"e.g. containers")," or edit ",(0,o.kt)("inlineCode",{parentName:"p"},"app.toml")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"conf.toml")," files to setup different port numbers."),(0,o.kt)("h2",{id:"run-validator-from-docker-container-for-testnet"},"Run validator from docker container for testnet"),(0,o.kt)("p",null,"::: note\nWe will set an alias for simplification of commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"alias archwayd='docker run --rm -it -v /tmp/.archway:/root/.archway archwaynetwork/archwayd:latest'\n")),(0,o.kt)("h3",{id:"get-the-docker-image"},"Get the Docker Image"),(0,o.kt)("p",null,"First we have to get the docker image "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull archwaynetwork/archwayd:latest\n")),(0,o.kt)("h3",{id:"init-config"},"Init config"),(0,o.kt)("p",null,"first we need to initialize our validator config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"archwayd init <moniker>\n")),(0,o.kt)("h3",{id:"retrieve-genesis"},"Retrieve Genesis"),(0,o.kt)("p",null,"To retreive genesis we first need to install jq to process json"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"apk add jq\n")),(0,o.kt)("p",null,"We can now retrieve our genesis file with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'sudo sh -c \'wget -qO- <rpc_url>/genesis | jq ."result"."genesis" > /tmp/.archway/config/genesis.json\'\n')),(0,o.kt)("h3",{id:"run-your-node-1"},"Run your node"),(0,o.kt)("p",null,"Let's start our node in the container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"  archwayd start --p2p.seeds <AddressN>@<Host_Name_orIPN>:<PORT> --x-crisis-skip-assert-invariants\n")),(0,o.kt)("h3",{id:"create-your-valdiator-1"},"Create your valdiator"),(0,o.kt)("p",null,"Once your node is ruunning and synced you can create a validator by staking tokens.\n::: note\nRun in a separate terminal if you ran the previous command in interactive mode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker exec -it validator \\\n        archwayd tx staking create-validator \\\n        --from <my-validator-account> \\\n        --amount 1000000000udenom \\\n        --min-self-delegation 1000000000udenom \\\n        --commission-rate 0.01 \\\n        --commission-max-rate 0.1 \\\n        --commission-max-change-rate 0.1 \\\n        --pubkey $(archwayd tendermint show-validator) \\\n        --chain-id <chain_id>\n")))}p.isMDXComponent=!0}}]);