"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[9467],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9196:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},p="Producing Wasm executables",l={unversionedId:"create/guides/my-first-dapp/wasm",id:"create/guides/my-first-dapp/wasm",isDocsHomePage:!1,title:"Producing Wasm executables",description:"Since we've tested and built our contract, we're still operating under the assumption everything works.",source:"@site/docs/create/guides/my-first-dapp/wasm.md",sourceDirName:"create/guides/my-first-dapp",slug:"/create/guides/my-first-dapp/wasm",permalink:"/docs/create/guides/my-first-dapp/wasm",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/create/guides/my-first-dapp/wasm.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Requesting Testnet funds",permalink:"/docs/create/guides/my-first-dapp/faucet"},next:{title:"Deploying your dApp on chain",permalink:"/docs/create/guides/my-first-dapp/deploy"}},u=[{value:"Default Wasm executables",id:"default-wasm-executables",children:[]},{value:"CosmWasm Wasm executables",id:"cosmwasm-wasm-executables",children:[]}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"producing-wasm-executables"},"Producing Wasm executables"),(0,o.kt)("p",null,"Since we've tested and built our contract, we're still operating under the assumption everything works. "),(0,o.kt)("p",null,"However, to test our dApp on Archway we'll need to build it as a ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," executable, then upload and instantiate it on chain."),(0,o.kt)("p",null,"There are 2 types of ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," binaries that can be produced by the Developer CLI. Let's call them ",(0,o.kt)("em",{parentName:"p"},'"default"')," ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," and ",(0,o.kt)("em",{parentName:"p"},'"cosmwasm"')," ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm"),". "),(0,o.kt)("h2",{id:"default-wasm-executables"},"Default Wasm executables"),(0,o.kt)("p",null,"This is a regular ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," binary. It's the same as you'd get by running the Rust native command ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo wasm"),". "),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Default")," ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," executables can be produced by the developer CLI using the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"archway deploy --dryrun\n")),(0,o.kt)("p",null,"Example output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Building wasm executable...\n\n  Compiling proc-macro2 v1.0.28\n  Compiling unicode-xid v0.2.2\n  # And so on until ...\n  Compiling my-project v0.1.0 (/home/my-system-path/my-project)\n    Finished release [optimized] target(s) in 27.78s\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note: use ",(0,o.kt)("inlineCode",{parentName:"strong"},"--dryrun")," before deploying to gauge whether the deployment will succeed. This is useful because of speed, as running ",(0,o.kt)("inlineCode",{parentName:"strong"},"archway deploy --dryrun")," is a lot faster.")),(0,o.kt)("h2",{id:"cosmwasm-wasm-executables"},"CosmWasm Wasm executables"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"CosmWasm")," ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," executables are optimized using the ",(0,o.kt)("inlineCode",{parentName:"p"},"cosmwasm/rust-optimizer")," which produces a smaller executable size than ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo wasm"),"."),(0,o.kt)("p",null,"Think of it like building ",(0,o.kt)("inlineCode",{parentName:"p"},"C++")," executables with ",(0,o.kt)("a",{parentName:"p",href:"https://upx.github.io/"},"UPX"),", as ",(0,o.kt)("inlineCode",{parentName:"p"},"cosmwasm/rust-optimizer")," also compresses the binary to produce smaller build outputs."),(0,o.kt)("p",null,"Producing ",(0,o.kt)("em",{parentName:"p"},"CosmWasm")," ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," executables is part of the deploy process and can be accessed by running the deploy command without the ",(0,o.kt)("inlineCode",{parentName:"p"},"--dryrun")," flag."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note: the Developer CLI currently only supports the Docker version of ",(0,o.kt)("inlineCode",{parentName:"strong"},"cosmwasm/rust-optimizer"),". The deploy process will fail and exit if Docker has not been started (Support for native ",(0,o.kt)("inlineCode",{parentName:"strong"},"cosmwasm/rust-optimizer")," bins coming soon).")))}m.isMDXComponent=!0}}]);