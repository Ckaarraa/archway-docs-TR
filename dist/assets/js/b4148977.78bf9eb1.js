"use strict";(self.webpackChunkarchway_docs=self.webpackChunkarchway_docs||[]).push([[8332],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4073:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},l="Joining a Network",p={unversionedId:"node/join-a-network",id:"node/join-a-network",isDocsHomePage:!1,title:"Joining a Network",description:"Step 1: Cleanup",source:"@site/docs/node/join-a-network.md",sourceDirName:"node",slug:"/node/join-a-network",permalink:"/docs/node/join-a-network",editUrl:"https://github.com/archway-network/archway-docs/edit/main/docs/node/join-a-network.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Running a Local Testnet",permalink:"/docs/node/running-a-local-testnet"},next:{title:"Validators Overview",permalink:"/docs/validator/overview"}},c=[{value:"Step 1: Cleanup",id:"step-1-cleanup",children:[]},{value:"Step 2: Download the genesis file",id:"step-2-download-the-genesis-file",children:[]},{value:"Step 3: Replace our local genesis file with the main one",id:"step-3-replace-our-local-genesis-file-with-the-main-one",children:[]},{value:"Step 4: Join the network",id:"step-4-join-the-network",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"joining-a-network"},"Joining a Network"),(0,a.kt)("h2",{id:"step-1-cleanup"},"Step 1: Cleanup"),(0,a.kt)("p",null,"Let's first cleanup our network. This is needed if you already have a genesis file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"archwayd unsafe-reset-all\nrm -rf ~/.app\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": This command will remove all data and configs you already set."),(0,a.kt)("h2",{id:"step-2-download-the-genesis-file"},"Step 2: Download the genesis file"),(0,a.kt)("p",null,"Download compressed genesis state and extract it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wget https://github.com/.../genesis.json.gz\ngzip -d genesis.json.gz\n")),(0,a.kt)("h2",{id:"step-3-replace-our-local-genesis-file-with-the-main-one"},"Step 3: Replace our local genesis file with the main one"),(0,a.kt)("p",null,"Move the downloaded genesis state to the archway directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# mkdir -p ~/.app\n# mkdir -p ~/.app/config\nmv genesis.json ~/.app/config/genesis.json\n")),(0,a.kt)("h2",{id:"step-4-join-the-network"},"Step 4: Join the network"),(0,a.kt)("p",null,"Start the archway and join the network"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"archwayd start --p2p.seeds <Address1>@<Host_Name_OR_IP1>:<PORT1>,<Address2>@<Host_Name_OR_IP2>:<PORT2>,<Address3>@<Host_Name_OR_IP3>:<PORT3>, ...<AddressN>@<Host_Name_OR_IPN>:<PORTN> --x-crisis-skip-assert-invariants\n")),(0,a.kt)("p",null,"Expected output:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TODO:")," ",(0,a.kt)("em",{parentName:"p"},"We need to have some nodes and actually run these commands to see what happens next.")))}d.isMDXComponent=!0}}]);